<?php
return [
    'folder'      => env('PHOTOBOOK_FOLDER', 'Photos'),
    'paper'       => env('PHOTOBOOK_PAPER', 'a4'),                 // a4 | a3
    'orientation' => env('PHOTOBOOK_ORIENTATION', 'landscape'),    // portrait | landscape
    'dpi'         => (int) env('PHOTOBOOK_DPI', 150),              // Dompdf CSS dpi (layout)
    'margin_mm'   => (int) env('PHOTOBOOK_MARGIN_MM', 0),

    // Image/PDF optimization & rendering
    'optimize' => [
        // Resize cached images so Dompdf embeds smaller bitmaps
        'resize' => (bool) env('PHOTOBOOK_OPTIMIZE_RESIZE', true),

        // If null, we derive from paper+target_dpi (page long edge).
        'max_long_edge_px' => env('PHOTOBOOK_OPTIMIZE_MAX_EDGE', null),

        // Convert to JPEG whenever possible (opaque PNG, HEIC, etc.)
        'convert_to_jpeg' => (bool) env('PHOTOBOOK_OPTIMIZE_TO_JPEG', true),

        // JPEG encode controls
        'jpeg_quality'      => (int) env('PHOTOBOOK_JPEG_QUALITY', 72), // 60–80 is a good range
        'progressive_jpeg'  => (bool) env('PHOTOBOOK_PROGRESSIVE_JPEG', true),

        // If source has alpha (PNG), flatten onto white for smaller JPEGs
        'flatten_png_to_white' => (bool) env('PHOTOBOOK_FLATTEN_PNG', true),

        // Strip metadata/ICC by re-encoding (on by default via our pipeline)
        'strip_metadata' => (bool) env('PHOTOBOOK_STRIP_METADATA', true),

        // Separate "target dpi" used to compute slot pixel sizes (not Dompdf's dpi)
        'target_dpi' => (int) env('PHOTOBOOK_TARGET_DPI', 160), // 144–180 keeps PDFs small & crisp

        // Give a little headroom for object-fit: cover crops
        'safety_scale' => (float) env('PHOTOBOOK_SAFETY_SCALE', 1.15),
    ],

    // Normalize images before embedding
    'normalize' => [
        // Apply EXIF-based orientation fix (rotate/flip) to JPEGs
        'exif_orientation' => (bool) env('PHOTOBOOK_EXIF_ORIENTATION', true),
    ],

    'cover' => [
        'title'     => env('PHOTOBOOK_COVER_TITLE', 'My Photo Book'),
        'subtitle'  => env('PHOTOBOOK_COVER_SUBTITLE', 'Generated by Laravel'),
        'show_date' => (bool) env('PHOTOBOOK_COVER_SHOW_DATE', true),
    ],

    // Planner weights and behavior
    'planner' => [
        'weights' => [
            // Cost = crop*w + orientMismatch*w + chronology*w; lower is better
            'crop' => (float) env('PHOTOBOOK_PLANNER_W_CROP', 1.0),
            'orientation' => (float) env('PHOTOBOOK_PLANNER_W_ORIENT', 0.4),
            'chronology' => (float) env('PHOTOBOOK_PLANNER_W_FLOW', 0.25),
        ],
        'bonuses' => [
            'hero_bonus' => (float) env('PHOTOBOOK_PLANNER_B_HERO', 0.3),
            'hero_miss_penalty' => (float) env('PHOTOBOOK_PLANNER_P_HEROMISS', 0.05),
            'diversity_penalty' => (float) env('PHOTOBOOK_PLANNER_P_DIVERSITY', 0.15),
        ],
        // Variety controls across pages
        'variety' => [
            // Penalize choosing a template seen recently (per occurrence in the window)
            'repeat_penalty' => (float) env('PHOTOBOOK_PLANNER_P_REPEAT', 0.25),
            // How many last pages to consider for repeats
            'repeat_window' => (int) env('PHOTOBOOK_PLANNER_REPEAT_WINDOW', 6),
            // Penalize template/photo aspect histogram mismatch (applied per page)
            'hist_penalty' => (float) env('PHOTOBOOK_PLANNER_P_HIST', 0.12),
            // Consider top-K templates and occasionally pick the 2nd best to add variety
            'top_k' => (int) env('PHOTOBOOK_PLANNER_TOPK', 2),
            // Probability threshold to pick the 2nd best when it’s close to best (0..1)
            'pick_randomness' => (float) env('PHOTOBOOK_PLANNER_PICK_RAND', 0.25),
            // How close the 2nd best must be to best to be eligible (fraction of best score)
            'second_within' => (float) env('PHOTOBOOK_PLANNER_SECOND_WITHIN', 0.12),
        ],
    ],

    // Grouper behavior for when to emit single-photo hero pages
    'grouper' => [
        'hero' => [
            'frequency' => (int) env('PHOTOBOOK_GROUPER_HERO_FREQ', 7),
            'extreme_ar_high' => (float) env('PHOTOBOOK_GROUPER_HERO_AR_H', 2.2),
            'extreme_ar_low'  => (float) env('PHOTOBOOK_GROUPER_HERO_AR_L', 0.6),
            'quality_threshold' => (float) env('PHOTOBOOK_GROUPER_HERO_QUAL', 0.9),
            'min_megapixels' => (float) env('PHOTOBOOK_GROUPER_HERO_MP', 20.0),
        ],
    ],

    // Tiny ML layer (toggleable). PHP-only features have zero extra deps.
    'ml' => [
        'enable'    => env('PHOTOBOOK_ML_ENABLE', true),

        // PHP-only features (no extra deps)
        'sharpness' => env('PHOTOBOOK_ML_SHARPNESS', true),
        'phash'     => env('PHOTOBOOK_ML_PHASH', true),

        // Optional Python sidecar features
        'faces'     => env('PHOTOBOOK_ML_FACES', false),
        'aesthetic' => env('PHOTOBOOK_ML_AESTHETIC', false),
        'saliency'  => env('PHOTOBOOK_ML_SALIENCY', false),
        'horizon'   => env('PHOTOBOOK_ML_HORIZON', false),

        // Sidecar command (absolute or in PATH)
        'sidecar'   => env('PHOTOBOOK_ML_SIDECAR', 'python3 ml_extract.py'),
    ],
];